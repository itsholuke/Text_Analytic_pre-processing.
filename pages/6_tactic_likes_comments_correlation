# pages/3_correlation_likes_comments.py
# --------------------------------------------------------------------
# Correlation Explorer ‚Äì classic_timeless_luxury  √ó  likes / comments
# --------------------------------------------------------------------
import pandas as pd
import streamlit as st

try:
    import matplotlib.pyplot as plt
    HAS_PLOT = True
except ModuleNotFoundError:
    HAS_PLOT = False

st.set_page_config(page_title="Correlation: Timeless Luxury vs Likes/Comments",
                   page_icon="üìà")
st.title("üìà Correlation Explorer")

st.markdown(
    """
    *Upload a CSV that already contains a **binary** column named
    `classic_timeless_luxury` and numeric columns `likes` and `comments`.
    I‚Äôll compute the Pearson correlation between the tactic and the
    engagement metrics.*"""
)

csv = st.file_uploader("üìÅ Upload CSV", type="csv")
if csv is None:
    st.stop()

# safer read (handles utf-8 / latin-1 etc.)
for enc in ("utf-8", "utf-8-sig", "latin1", "cp1252"):
    try:
        csv.seek(0)
        df = pd.read_csv(csv, encoding=enc)
        break
    except UnicodeDecodeError:
        continue
else:
    st.error("Unable to decode file with common encodings.")
    st.stop()

st.subheader("Preview")
st.dataframe(df.head(), use_container_width=True)

required = {"classic_timeless_luxury", "likes", "comments"}
if not required.issubset(df.columns):
    st.error(f"CSV must contain columns: {', '.join(required)}")
    st.stop()

# ensure correct dtypes
df["classic_timeless_luxury"] = df["classic_timeless_luxury"].astype(float)
df["likes"]     = pd.to_numeric(df["likes"], errors="coerce")
df["comments"]  = pd.to_numeric(df["comments"], errors="coerce")

st.markdown("### Correlation table")
corr = df[["classic_timeless_luxury", "likes", "comments"]].corr().round(3)
st.dataframe(corr, use_container_width=True)

st.download_button("üíæ Download correlation CSV",
                   corr.to_csv().encode(),
                   "correlation_table.csv",
                   "text/csv")

if HAS_PLOT:
    metric = st.selectbox("Scatterplot against:", ("likes", "comments"))
    fig, ax = plt.subplots()
    ax.scatter(df["classic_timeless_luxury"], df[metric], alpha=0.5)
    ax.set_xlabel("classic_timeless_luxury (0/1)")
    ax.set_ylabel(metric)
    ax.set_title(f"{metric} vs tactic flag")
    st.pyplot(fig)
