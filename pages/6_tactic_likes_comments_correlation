# --------------------------------------------------------------------
import pandas as pd
import streamlit as st
from pathlib import Path

# ---------- robust CSV reader (tries common encodings) ---------------
ENCODINGS = ("utf-8", "utf-8-sig", "latin1", "cp1252")
def safe_read_csv(fileobj) -> pd.DataFrame:
    for enc in ENCODINGS:
        try:
            fileobj.seek(0)
            return pd.read_csv(fileobj, encoding=enc)
        except UnicodeDecodeError:
            continue
    raise UnicodeDecodeError("All tried encodings failed", b"", 0, 0, "")

# ---------- optional plotting ----------------------------------------
try:
    import matplotlib.pyplot as plt
    HAS_PLOT = True
except ModuleNotFoundError:
    HAS_PLOT = False
# ---------------------------------------------------------------------

st.set_page_config(page_title="6 Correlation Likes Comments", page_icon="üìà")
st.title("üìà Correlation ‚Äì Timeless Luxury vs Likes & Comments")

st.markdown(
    """
    **Required columns (case-sensitive)** in your CSV:

    | column | type | description |
    |--------|------|-------------|
    | `classic_timeless_luxury` | 0 / 1 | tactic flag |
    | `likes` | numeric | post likes |
    | `comments` | numeric | post comments |

    I‚Äôll compute the Pearson correlation coefficients and (optionally) show
    a scatterplot.
    """
)

uploaded = st.file_uploader("üìÅ Upload CSV", type="csv")
if uploaded is None:
    st.stop()

# read with encoding fallback
try:
    df = safe_read_csv(uploaded)
except UnicodeDecodeError as err:
    st.error(f"Cannot decode CSV: {err}")
    st.stop()

st.subheader("Preview")
st.dataframe(df.head(), use_container_width=True)

required = {"classic_timeless_luxury", "likes", "comments"}
if not required.issubset(df.columns):
    st.error(f"CSV must contain columns: {', '.join(required)}")
    st.stop()

# ensure numeric types
df["classic_timeless_luxury"] = df["classic_timeless_luxury"].astype(float)
for col in ("likes", "comments"):
    df[col] = pd.to_numeric(df[col], errors="coerce")

clean = df.dropna(subset=required)

st.markdown("### Correlation matrix")
corr = clean[list(required)].corr().round(3)
st.dataframe(corr, use_container_width=True)

# download correlation table
st.download_button(
    "üíæ Download correlation CSV",
    corr.to_csv().encode(),
    file_name=f"{Path(uploaded.name).stem}_correlation.csv",
    mime="text/csv",
)

# optional scatterplot
if HAS_PLOT:
    metric = st.selectbox("Scatterplot against:", ("likes", "comments"))
    fig, ax = plt.subplots()
    ax.scatter(clean["classic_timeless_luxury"], clean[metric], alpha=0.45)
    ax.set_xlabel("classic_timeless_luxury (0/1)")
    ax.set_ylabel(metric)
    ax.set_title(f"{metric} vs tactic flag")
    st.pyplot(fig)
