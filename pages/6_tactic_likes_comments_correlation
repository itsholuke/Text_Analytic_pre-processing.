# pages/6_Correlation_Likes_Comments.py
# --------------------------------------------------------------------
# 6 • Correlation Explorer – classic_timeless_luxury × likes & comments
# --------------------------------------------------------------------
# • Upload a CSV that already contains
#       classic_timeless_luxury  (0/1 flag)
#       likes                    (numeric)
#       comments                 (numeric)
# • Shows Pearson correlation matrix and optional scatterplot
# • Download correlation table as CSV
# --------------------------------------------------------------------
import pandas as pd
import streamlit as st
from pathlib import Path

try:
    import matplotlib.pyplot as plt
    HAS_PLOT = True
except ModuleNotFoundError:
    HAS_PLOT = False

# ── robust CSV reader -------------------------------------------------
ENCODINGS = ("utf-8", "utf-8-sig", "latin1", "cp1252")

def safe_read_csv(file_obj) -> pd.DataFrame:
    """Try common encodings until one works."""
    for enc in ENCODINGS:
        try:
            file_obj.seek(0)
            return pd.read_csv(file_obj, encoding=enc)
        except UnicodeDecodeError:
            continue
    raise UnicodeDecodeError("unable to decode with utf-8 / latin-1 / cp1252", b"", 0, 0, "")

# ──────────────────────────────────────────────────────────────────────
st.set_page_config(page_title="6 Correlation Likes Comments", page_icon="📈")
st.title("📈 Correlation – Timeless Luxury vs Likes & Comments")

st.markdown(
    """
    **Required columns (case-sensitive)** in your CSV:

    * `classic_timeless_luxury` → binary 0 / 1 flag  
    * `likes`                   → numeric  
    * `comments`                → numeric
    """
)

csv = st.file_uploader("📁 Upload CSV", type="csv")
if csv is None:
    st.stop()

try:
    df = safe_read_csv(csv)
except UnicodeDecodeError as err:
    st.error(f"Cannot decode file: {err}")
    st.stop()

st.subheader("Preview")
st.dataframe(df.head(), use_container_width=True)

required = {"classic_timeless_luxury", "likes", "comments"}
if not required.issubset(df.columns):
    st.error(f"CSV must contain columns: {', '.join(required)}")
    st.stop()

# convert and clean
df["classic_timeless_luxury"] = df["classic_timeless_luxury"].astype(float)
df["likes"]    = pd.to_numeric(df["likes"],    errors="coerce")
df["comments"] = pd.to_numeric(df["comments"], errors="coerce")
clean = df.dropna(subset=required)

st.markdown("### Correlation matrix")
corr = clean[list(required)].corr().round(3)
st.dataframe(corr, use_container_width=True)

st.download_button(
    "💾 Download correlation CSV",
    corr.to_csv().encode(),
    file_name=f"{Path(csv.name).stem}_correlation.csv",
    mime="text/csv",
)

if HAS_PLOT:
    metric = st.selectbox("Scatterplot against:", ("likes", "comments"))
    fig, ax = plt.subplots()
    ax.scatter(clean["classic_timeless_luxury"], clean[metric], alpha=0.45)
    ax.set_xlabel("classic_timeless_luxury (0/1)")
    ax.set_ylabel(metric)
    ax.set_title(f"{metric} vs tactic flag")
    st.pyplot(fig)
